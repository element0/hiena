
2018-06-01  2028

note:  must begin using libhiena and libcosmos

WIP:  cosmos_init
      cosmos_bind
      lookup_light.so
      libhiena
      libcosmos

done:  cosmos_mknod_path()
      cosmos_lookup()   /* cache only */

todo: cosmos_lookup() delegate function
      cosmos_init() module paths


goals:  proto-frame
          lookup module
          file module

   cosmos_init will prepare the cosmos db state so that the cosmos_bind() and cosmos_lookup() functions will operate correctly.


   so the following program  will work:

      ino=cosmos_mknkod_path(str)
      cosmos_bind(ino,url)
      cosmos_lookup(ino,str2)






2018-05-17  0752
2018-05-22  0757
2018-05-23  0801
2018-05-28  0750


WIP:   
       module loading
       cosmos_config.{c,h}


done:  test_file_module
       ~/.cosm/lib/cosmos/modules/.
       cosmos_calc_fnpath()
       prod_fns.c


prep:
      cosmos_init
      hiena_svc


WIP:  source and map

      - prod_source
      - prod_map


WIP:  file module



stack:
      prod_fns.c
      cosmos_db_get_mod()






2018-05-15  0804

WIP:  cosmos_lookup


fn stack:
      cosmos_lookup
      lookup module
OK    lookup_hdl::find_child
OK    lookup_svc::lookup_find_child
OK    prod_fns::prod_find_child
*     prod_fns::prod_map
OK    dcel::dcel_find_child



2018-05-13  0623

DONE! dcel_dirsvc
    - opendir()
    - readdir()
    - closedir()


2018-05-01  0758
2018-05-13  0622

DONE! dcel child directory system
    - dcel_add_child()
    - dcel_find_child()



2018-04-30  0612

WIP:  dcel dfind_child_regex

  child index needs to be searchable with a regex.

Research results (via google):

  arrays elements itereated through and individually compared with the regex.
  c++ containers do not have a regex search function.
  c++ containers DO have a lower_bound search.



2018-04-26  0805

DESIGN:  lookup_svc

 q: when creating a prod instr sequence, can we do if-then statements?  i need to conditionally fire a 'transform' if a 'mapper' fails.

 a: do not create production instruction sequences.  keep logic inside the c code and fire each production instruction from the c code.



2018-03-25  1046

snafufs design:
   binding an open DIR
    to a cosmos af
    via forking a passthrough fs



2018-02-20  0802

wip:  snafufs.c

to prototype:
RESTful: aframe_value(), dcel_value()

vs. locking io: aframe_val_lock(), dcel_val_lock()



2017-11-29  1951

DONE:  cosmos_init()



2017-11-21  0756

wip: lookup_grind()

focus: dgrind_so()



2017-10-15  1600

todo: eliminate mapcel object, combine functionality into dcel


2017-10-12  2517

todo: lookup_hdl.h lookup_module.h


2017-10-12  1734

todo: revise dcel_mapsvc, directories use dcels instead of mapcels.

...

todo:  conform scanner api to work as prod fn.

save result dcel into hsp.

...

wip: dfind() dgrind() prod_exec()

...

todo: implement readdir()



2017-10-5  0723

done:  associate fragment info with a mapcel (see mapcel.md) -- use a dcel (see dcel.md)


2017-10-4  0625  IN PROGRESS...

todo:  read bytes from a mapcel.

how:  use a dcel to encapsulate the mapcel target.

why:  a mapcel doesn't contain media information, a fragment does.


2017-9-28  1755

done: use a directory builder stack in dcel_fh for dcel_mapsvc functions


2017-9-26  1844

fixed: mapcel_dir object

    implements an array of mapcel pointers that reallocate in blocks when more elements are added.


2017-9-7 1800

goal: fix mapping system and API.

status:
    9-21 working on dcel_dir_svc
    9-21 working on mapsvc/{new_dirent,make_dir}


2017-9-7 0730

goal: allow inconsistent levels of indent later in an outline

priority:  low.  finish hiena mapping system first.  use ox3 as a test util.

example:  the outline nests 3 layers in, and then steps out in smaller indent sizes for 5 layers.

solution: use btree to keep indent stack

solution: array elements are altered to match the new indent size after an END_BODY


2017-9-6  DONE

write ox3: same as ox2 but no mapping calls

goal: debug ox parser

note: mapping calls caused a double-free err.
 

2017-8-3

add hash function internal to mapsvc to hash strings into rule ids.

pass mapsvc a string typecast as void *

keep ruleid void * compatible

working in:
  btree
  mapsvc
  .l .y
  mapcel


2017-8-8

frag_curs logic visually sound

